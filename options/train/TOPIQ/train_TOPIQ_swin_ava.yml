name: 005_CFANet_Swin_ava
# name: debug_model
model_type: DistIQAModel 
# model_type: BackboneFTModel 
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 123 

define: &img_size_oneside 384 
# define: &resize_range [384, 416]

define: &img_size [*img_size_oneside, *img_size_oneside]
define: &backbone swin_base_patch4_window12_384

define: &train_batch_size 16 
define: &test_batch_size 1 

# dataset and data loader settings
datasets:
  train:
    name: ava 
    type: AVADataset 
    dataroot_target: ./datasets/AVA_dataset/ava_images/
    meta_info_file: ./datasets/meta_info/meta_info_AVADataset.csv
    split_file: ./datasets/meta_info/ava_official_ilgnet.pkl
    split_index: 1 # use official split  

    augment:
      # resize: *img_size_oneside
      # random_crop: *img_size 
      resize: *img_size
      hflip: true
    img_range: 1
    
    # data loader
    use_shuffle: true 
    num_worker_per_gpu: 16 
    batch_size_per_gpu: *train_batch_size 
    dataset_enlarge_ratio: 1 
    prefetch_mode: cpu
    num_prefetch_queue: *train_batch_size 

  val_0:
    name: ava_val
    type: AVADataset 
    dataroot_target: ./datasets/AVA_dataset/ava_images/
    meta_info_file: ./datasets/meta_info/meta_info_AVADataset.csv
    split_file: ./datasets/meta_info/ava_official_ilgnet.pkl
    split_index: 1 # use official split  

    augment:
      resize: *img_size
      # resize: *img_size_oneside
      # center_crop: *img_size

    num_worker_per_gpu: 4
    batch_size_per_gpu: *test_batch_size 
    prefetch_mode: cpu
    num_prefetch_queue: 32 

  # val_1:
  #   name: ava_test 
  #   type: AVADataset 
  #   dataroot_target: ./datasets/AVA_dataset/ava_images/
  #   meta_info_file: ./datasets/meta_info/meta_info_AVADataset.csv
  #   split_file: ./datasets/meta_info/ava_official_ilgnet.pkl
  #   split_index: 1 # use official split  
  #   override_phase: test
  
  #   augment: 
  #     resize: *img_size_oneside

  #   num_worker_per_gpu: 4
  #   batch_size_per_gpu: *test_batch_size
  #   prefetch_mode: cpu
  #   num_prefetch_queue: 8 

# network structures
network:
  type: CFANet 
  use_ref: false
  pretrained: false
  num_class: 10
  num_crop: 1 
  num_attn_layers: 1
  crop_size: *img_size
  inter_dim: 512 
  num_heads: 8
  semantic_model_name: *backbone
  block_pool: weighted_avg

# path
path:
  strict_load_g: true
  resume_state: ~

# training settings
train:
  optim:
    type: AdamW
    lr: !!float 3e-5 
    weight_decay: !!float 1e-5
  
  scheduler:
    type: CosineAnnealingLR
    T_max: 10 
    eta_min: 0 
    # type: StepLR 
    # step_size: !!float 1e9
    # gamma: 1.0 

  total_iter: 2000000
  total_epoch: 10
  finetune_start_iter: 0 
  warmup_iter: -1  # no warm up
  
  # losses
  mos_loss_opt:
    type: EMDLoss
    loss_weight: !!float 1.0

  # metric_loss_opt:
  #   type: PLCCLoss 
  #   loss_weight: !!float 1.0 

# validation settings
val:
  val_freq: !!float 2e3 
  save_img: false
  pbar: true

  key_metric: srcc # if this metric improve, update all metrics. If not specified, each best metric results will be updated separately 
  metrics:
    srcc: 
      type: calculate_srcc

    plcc: 
      type: calculate_plcc

# logging settings
logger:
  print_freq: 100
  save_latest_freq: !!float 1e3 
  log_imgs_freq: 1000
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500

find_unused_parameters: True
